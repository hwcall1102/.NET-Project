// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TakeawayTitans.Data;

#nullable disable

namespace TakeawayTitans.Migrations
{
    [DbContext(typeof(TakeawayTitansContext))]
    [Migration("20251009205642_UpdateOrderOrderItems")]
    partial class UpdateOrderOrderItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TakeawayTitans.Data.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Crisp romaine with Caesar dressing.",
                            ImageUrl = "https://images.pexels.com/photos/8251537/pexels-photo-8251537.jpeg",
                            Name = "Caesar Salad",
                            Price = 7.25m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tomatoes, cucumbers, feta, and olives.",
                            ImageUrl = "https://www.cookipedia.co.uk/wiki/images/8/87/Greek_salad_recipe.jpg",
                            Name = "Greek Salad",
                            Price = 7.50m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Fresh mixed greens with seasonal veggies.",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQmzYDNf1qIDSjvZLHCi98piiao6gi6K7ZIyw&s",
                            Name = "Garden Salad",
                            Price = 6.99m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Baby spinach, strawberries, and almonds.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/c/c4/Salad_with_strawberries.jpg",
                            Name = "Spinach Salad",
                            Price = 7.75m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Chicken, bacon, avocado, egg, and blue cheese.",
                            ImageUrl = "https://images.stockcake.com/public/6/f/6/6f6293cf-b710-40e3-b0c6-af329f49c182/hearty-cobb-salad-stockcake.jpg",
                            Name = "Cobb Salad",
                            Price = 8.50m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Fresh strawberries blended with yogurt.",
                            ImageUrl = "https://images.pexels.com/photos/8169597/pexels-photo-8169597.jpeg",
                            Name = "Strawberry Smoothie",
                            Price = 5.50m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Ripe mangoes with orange juice.",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQEg03LIorRnJYimTc6rQ0rLUd_B9RrKp0GnA&s",
                            Name = "Mango Smoothie",
                            Price = 5.75m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Banana, milk, and honey.",
                            ImageUrl = "https://images.rawpixel.com/image_social_landscape/czNmcy1wcml2YXRlL3Jhd3BpeGVsX2ltYWdlcy93ZWJzaXRlX2NvbnRlbnQvbHIvaXMxMTA0NS1pbWFnZS1rd3lzaTYwZC5qcGc.jpg",
                            Name = "Banana Smoothie",
                            Price = 5.25m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Spinach, kale, apple, and banana.",
                            ImageUrl = "https://i1.pickpik.com/photos/153/22/476/green-smoothie-drink-healthy-preview.jpg",
                            Name = "Green Smoothie",
                            Price = 6.00m
                        },
                        new
                        {
                            Id = 10,
                            Description = "Mixed berries blended with yogurt.",
                            ImageUrl = "https://i1.pickpik.com/photos/585/986/375/smoothie-milkshake-mixed-berry-preview.jpg",
                            Name = "Berry Blast Smoothie",
                            Price = 6.25m
                        });
                });

            modelBuilder.Entity("TakeawayTitans.Data.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("PreparingAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReadyAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Received");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CreatedAt = new DateTime(2025, 10, 3, 10, 0, 0, 0, DateTimeKind.Utc),
                            CustomerEmail = "morgan.park@example.com",
                            CustomerName = "Morgan Park",
                            CustomerPhone = "555-0912",
                            ReceivedAt = new DateTime(2025, 10, 3, 10, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Received"
                        },
                        new
                        {
                            OrderId = 2,
                            CreatedAt = new DateTime(2025, 10, 1, 15, 30, 0, 0, DateTimeKind.Utc),
                            CustomerEmail = "jamie.johnson@example.com",
                            CustomerName = "Jamie Johnson",
                            CustomerPhone = "555-0134",
                            PreparingAt = new DateTime(2025, 10, 1, 15, 30, 0, 0, DateTimeKind.Utc),
                            ReceivedAt = new DateTime(2025, 10, 1, 15, 15, 0, 0, DateTimeKind.Utc),
                            Status = "Preparing"
                        },
                        new
                        {
                            OrderId = 3,
                            CreatedAt = new DateTime(2025, 10, 2, 11, 15, 0, 0, DateTimeKind.Utc),
                            CustomerEmail = "taylor.nguyen@example.com",
                            CustomerName = "Taylor Nguyen",
                            CustomerPhone = "555-0456",
                            PreparingAt = new DateTime(2025, 10, 2, 11, 5, 0, 0, DateTimeKind.Utc),
                            ReadyAt = new DateTime(2025, 10, 2, 11, 15, 0, 0, DateTimeKind.Utc),
                            ReceivedAt = new DateTime(2025, 10, 2, 11, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Ready"
                        },
                        new
                        {
                            OrderId = 4,
                            CompletedAt = new DateTime(2025, 10, 3, 11, 30, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 10, 3, 11, 30, 0, 0, DateTimeKind.Utc),
                            CustomerEmail = "riley.santos@example.com",
                            CustomerName = "Riley Santos",
                            CustomerPhone = "555-0933",
                            PreparingAt = new DateTime(2025, 10, 3, 11, 15, 0, 0, DateTimeKind.Utc),
                            ReadyAt = new DateTime(2025, 10, 3, 11, 25, 0, 0, DateTimeKind.Utc),
                            ReceivedAt = new DateTime(2025, 10, 3, 11, 10, 0, 0, DateTimeKind.Utc),
                            Status = "Completed"
                        },
                        new
                        {
                            OrderId = 5,
                            CanceledAt = new DateTime(2025, 10, 3, 12, 45, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 10, 3, 12, 45, 0, 0, DateTimeKind.Utc),
                            CustomerEmail = "jordan.lee@example.com",
                            CustomerName = "Jordan Lee",
                            CustomerPhone = "555-0977",
                            PreparingAt = new DateTime(2025, 10, 3, 12, 35, 0, 0, DateTimeKind.Utc),
                            ReceivedAt = new DateTime(2025, 10, 3, 12, 30, 0, 0, DateTimeKind.Utc),
                            Status = "Canceled"
                        });
                });

            modelBuilder.Entity("TakeawayTitans.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Customization")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Customization = "No croutons",
                            MenuItemId = 1,
                            OrderId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            Customization = "Extra strawberries",
                            MenuItemId = 6,
                            OrderId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            Customization = "Add grilled chicken",
                            MenuItemId = 4,
                            OrderId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            MenuItemId = 9,
                            OrderId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 5,
                            Customization = "Light dressing",
                            MenuItemId = 1,
                            OrderId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 6,
                            MenuItemId = 9,
                            OrderId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 7,
                            Customization = "No onions",
                            MenuItemId = 4,
                            OrderId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 8,
                            Customization = "Extra strawberries",
                            MenuItemId = 6,
                            OrderId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 9,
                            Customization = "No croutons",
                            MenuItemId = 1,
                            OrderId = 5,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 10,
                            Customization = "Add grilled chicken",
                            MenuItemId = 4,
                            OrderId = 5,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("TakeawayTitans.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 9, 20, 56, 41, 848, DateTimeKind.Utc).AddTicks(140),
                            Email = "test@gmail.com",
                            FirstName = "Test",
                            ImageUrl = "https://picsum.photos/id/64/200",
                            LastName = "User",
                            PasswordHash = "$2a$11$e6NGDp1tYhMxmAJOyqgl2eIG5WSYdESXpLFFlrMvvHWCIsGItW/6W",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 9, 20, 56, 41, 848, DateTimeKind.Utc).AddTicks(150),
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            ImageUrl = "https://picsum.photos/id/101/200",
                            LastName = "Johnson",
                            PasswordHash = "$2a$11$e6NGDp1tYhMxmAJOyqgl2eIG5WSYdESXpLFFlrMvvHWCIsGItW/6W",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 9, 20, 56, 41, 848, DateTimeKind.Utc).AddTicks(150),
                            Email = "bob.smith@example.com",
                            FirstName = "Bob",
                            ImageUrl = "https://picsum.photos/id/102/200",
                            LastName = "Smith",
                            PasswordHash = "$2a$11$e6NGDp1tYhMxmAJOyqgl2eIG5WSYdESXpLFFlrMvvHWCIsGItW/6W",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 9, 20, 56, 41, 848, DateTimeKind.Utc).AddTicks(150),
                            Email = "carol.davis@example.com",
                            FirstName = "Carol",
                            ImageUrl = "https://picsum.photos/id/103/200",
                            LastName = "Davis",
                            PasswordHash = "$2a$11$e6NGDp1tYhMxmAJOyqgl2eIG5WSYdESXpLFFlrMvvHWCIsGItW/6W",
                            Role = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 9, 20, 56, 41, 848, DateTimeKind.Utc).AddTicks(160),
                            Email = "david.martinez@example.com",
                            FirstName = "David",
                            ImageUrl = "https://picsum.photos/id/104/200",
                            LastName = "Martinez",
                            PasswordHash = "$2a$11$e6NGDp1tYhMxmAJOyqgl2eIG5WSYdESXpLFFlrMvvHWCIsGItW/6W",
                            Role = 0
                        });
                });

            modelBuilder.Entity("TakeawayTitans.Data.Models.OrderItem", b =>
                {
                    b.HasOne("TakeawayTitans.Data.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TakeawayTitans.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TakeawayTitans.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
