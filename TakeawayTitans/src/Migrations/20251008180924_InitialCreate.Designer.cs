// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TakeawayTitans.Data;

#nullable disable

namespace TakeawayTitans.Migrations
{
    [DbContext(typeof(TakeawayTitansContext))]
    [Migration("20251008180924_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TakeawayTitans.Data.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Crisp romaine with Caesar dressing.",
                            ImageUrl = "https://example.com/caesar-salad.jpg",
                            Name = "Caesar Salad",
                            Price = 7.25m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tomatoes, cucumbers, feta, and olives.",
                            ImageUrl = "https://example.com/greek-salad.jpg",
                            Name = "Greek Salad",
                            Price = 7.50m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Fresh mixed greens with seasonal veggies.",
                            ImageUrl = "https://example.com/garden-salad.jpg",
                            Name = "Garden Salad",
                            Price = 6.99m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Baby spinach, strawberries, and almonds.",
                            ImageUrl = "https://example.com/spinach-salad.jpg",
                            Name = "Spinach Salad",
                            Price = 7.75m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Chicken, bacon, avocado, egg, and blue cheese.",
                            ImageUrl = "https://example.com/cobb-salad.jpg",
                            Name = "Cobb Salad",
                            Price = 8.50m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Fresh strawberries blended with yogurt.",
                            ImageUrl = "https://example.com/strawberry-smoothie.jpg",
                            Name = "Strawberry Smoothie",
                            Price = 5.50m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Ripe mangoes with orange juice.",
                            ImageUrl = "https://example.com/mango-smoothie.jpg",
                            Name = "Mango Smoothie",
                            Price = 5.75m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Banana, milk, and honey.",
                            ImageUrl = "https://example.com/banana-smoothie.jpg",
                            Name = "Banana Smoothie",
                            Price = 5.25m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Spinach, kale, apple, and banana.",
                            ImageUrl = "https://example.com/green-smoothie.jpg",
                            Name = "Green Smoothie",
                            Price = 6.00m
                        },
                        new
                        {
                            Id = 10,
                            Description = "Mixed berries blended with yogurt.",
                            ImageUrl = "https://example.com/berry-blast-smoothie.jpg",
                            Name = "Berry Blast Smoothie",
                            Price = 6.25m
                        });
                });

            modelBuilder.Entity("TakeawayTitans.Data.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TakeawayTitans.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Customization")
                        .HasColumnType("text");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TakeawayTitans.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 8, 18, 9, 23, 88, DateTimeKind.Utc).AddTicks(4460),
                            Email = "test@gmail.com",
                            FirstName = "Test",
                            ImageUrl = "https://picsum.photos/id/64/200",
                            LastName = "User",
                            PasswordHash = "$2a$11$kHZwgzIn.1zBKAcY751BAu.4.xUifrRPuaxcSErOo.WgpF14D4cCa",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 8, 18, 9, 23, 88, DateTimeKind.Utc).AddTicks(4510),
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            ImageUrl = "https://picsum.photos/id/101/200",
                            LastName = "Johnson",
                            PasswordHash = "$2a$11$kHZwgzIn.1zBKAcY751BAu.4.xUifrRPuaxcSErOo.WgpF14D4cCa",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 8, 18, 9, 23, 88, DateTimeKind.Utc).AddTicks(4560),
                            Email = "bob.smith@example.com",
                            FirstName = "Bob",
                            ImageUrl = "https://picsum.photos/id/102/200",
                            LastName = "Smith",
                            PasswordHash = "$2a$11$kHZwgzIn.1zBKAcY751BAu.4.xUifrRPuaxcSErOo.WgpF14D4cCa",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 8, 18, 9, 23, 88, DateTimeKind.Utc).AddTicks(4580),
                            Email = "carol.davis@example.com",
                            FirstName = "Carol",
                            ImageUrl = "https://picsum.photos/id/103/200",
                            LastName = "Davis",
                            PasswordHash = "$2a$11$kHZwgzIn.1zBKAcY751BAu.4.xUifrRPuaxcSErOo.WgpF14D4cCa",
                            Role = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 8, 18, 9, 23, 88, DateTimeKind.Utc).AddTicks(4580),
                            Email = "david.martinez@example.com",
                            FirstName = "David",
                            ImageUrl = "https://picsum.photos/id/104/200",
                            LastName = "Martinez",
                            PasswordHash = "$2a$11$kHZwgzIn.1zBKAcY751BAu.4.xUifrRPuaxcSErOo.WgpF14D4cCa",
                            Role = 0
                        });
                });

            modelBuilder.Entity("TakeawayTitans.Data.Models.OrderItem", b =>
                {
                    b.HasOne("TakeawayTitans.Data.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TakeawayTitans.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TakeawayTitans.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
