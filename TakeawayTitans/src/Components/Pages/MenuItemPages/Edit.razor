@page "/menuitems/edit"
@using Microsoft.EntityFrameworkCore
@using TakeawayTitans.Data.Models
@using TakeawayTitans.Data
@inject IDbContextFactory<TakeawayTitans.Data.TakeawayTitansContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<div class="page">
    <h1>Edit</h1>

    <h2>Menu Item</h2>
    <hr />
    @if (MenuItem is null)
    {
                <p><em>Loading...</em></p>
    }
    else
    {
                <div class="row">
                    <div class="col-md-4">
                        <EditForm method="post" Model="MenuItem" OnValidSubmit="UpdateMenuItem" FormName="edit" Enhance>
                            <DataAnnotationsValidator />
                            <ValidationSummary role="alert"/>
                            <input type="hidden" name="MenuItem.Id" value="@MenuItem.Id" />
                            <div class="mb-3">
                                <label for="name" class="form-label">Name:</label>
                                <InputText id="name" @bind-Value="MenuItem.Name" class="form-control" />
                                <ValidationMessage For="() => MenuItem.Name" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="price" class="form-label">Price:</label>
                                <InputNumber id="price" @bind-Value="MenuItem.Price" class="form-control" />
                                <ValidationMessage For="() => MenuItem.Price" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Description:</label>
                                <InputText id="description" @bind-Value="MenuItem.Description" class="form-control" />
                                <ValidationMessage For="() => MenuItem.Description" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="imageurl" class="form-label">ImageUrl:</label>
                                <InputText id="imageurl" @bind-Value="MenuItem.ImageUrl" class="form-control" />
                                <ValidationMessage For="() => MenuItem.ImageUrl" class="text-danger" />
                            </div>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </EditForm>
                    </div>
                </div>
    }

    <div>
        <a href="/admin/menu">Back to List</a>
    </div>

</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private MenuItem? MenuItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        MenuItem ??= await context.MenuItems.FirstOrDefaultAsync(m => m.Id == Id);

        if (MenuItem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateMenuItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(MenuItem!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MenuItemExists(MenuItem!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/admin/menu");
    }

    private bool MenuItemExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.MenuItems.Any(e => e.Id == id);
    }
}
