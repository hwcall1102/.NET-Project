@page "/order"
@using TakeawayTitans.Dto
@using TakeawayTitans.Services
@using TakeawayTitans.Data.Models
@inject ShoppingCartService CartService
@inject HttpClient Http
@rendermode InteractiveServer

<h3 class="mb-4 text-center">Checkout</h3>

@if (CartService.CartItems == null || !CartService.CartItems.Any())
{
    <div class="alert alert-info text-center">
        Your cart is empty. <a href="/menu" class="alert-link">Go back to menu</a>
    </div>
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">

                @foreach (var item in CartService.CartItems)
                {
                    <div class="card mb-3 shadow-sm">
                        <div class="card-body d-flex flex-column flex-md-row align-items-md-center justify-content-between">
                            <div>
                                <h5 class="card-title mb-1">@item.MenuItemName</h5>

                                @if (!string.IsNullOrWhiteSpace(item.Customization))
                                {
                                    <p class="text-muted small mb-2">Note: @item.Customization</p>
                                }

                                <p class="mb-0">
                                    Price: <strong>$@item.Price.ToString("0.00")</strong><br />
                                    Total: <strong>$@((item.Price * item.Quantity).ToString("0.00"))</strong>
                                </p>
                            </div>

                            <div class="d-flex align-items-center mt-3 mt-md-0">
                                <button class="btn btn-secondary btn-sm me-2" @onclick="() => ChangeQuantity(item, -1)">-</button>
                                <span class="mx-2">@item.Quantity</span>
                                <button class="btn btn-secondary btn-sm me-3" @onclick="() => ChangeQuantity(item, 1)">+</button>

                                <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveItem(item)">Remove</button>
                            </div>
                        </div>
                    </div>
                }

                <div class="card mt-4 shadow-sm">
                    <div class="card-body text-end">
                        <h5>Total: <span class="fw-bold">$@TotalPrice.ToString("0.00")</span></h5>
                    </div>
                </div>

                <div class="text-center mt-4">
                    <button class="btn btn-success fw-semibold" @onclick="ToggleCheckoutForm">
                        @(showCheckoutForm ? "Cancel" : "Checkout")
                    </button>
                </div>

                @if (showCheckoutForm)
                {
                    <div class="card mt-4 shadow-sm p-4">
                        <h5 class="mb-3 text-center">Enter your details</h5>
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" @bind="customerName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Phone</label>
                            <input type="tel" class="form-control" @bind="customerPhone" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" @bind="customerEmail" />
                        </div>

                        <div class="text-center">
                            <button type="button" class="btn btn-dark fw-semibold" @onclick="SubmitOrder">Submit Order</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

 @if (!string.IsNullOrEmpty(orderMessage))
    {
        <div class="alert alert-success text-center mt-4">
            <h5 class="mb-2">Thank you for your order!</h5>
            <p>Your order number is <strong>@orderCode</strong>.</p>
            <p>Your order will be ready in <strong>20 minutes</strong> â€” ready at @readyTime.ToString("h:mm tt").</p>
        </div>
    }

@code {
    private bool showCheckoutForm = false;
    private string customerName = "";
    private string customerPhone = "";
    private string customerEmail = "";
    private string orderMessage = "";
    private string orderCode = "";
    private DateTime readyTime;

    private Func<Task>? cartChangedHandler;

    private decimal TotalPrice => CartService.CartItems.Sum(i => i.Price * i.Quantity);

    protected override void OnInitialized()
    {
        cartChangedHandler = () => InvokeAsync(StateHasChanged);
        CartService.OnChange += cartChangedHandler;
    }

    public void Dispose()
    {
        if (cartChangedHandler != null)
            CartService.OnChange -= cartChangedHandler;
    }

    private void ChangeQuantity(CartItemDto item, int delta)
    {
        item.Quantity += delta;
        if (item.Quantity < 1)
        {
            CartService.RemoveItem(item);
        }
        CartService.UpdateCart();
    }

    private void RemoveItem(CartItemDto item)
    {
        CartService.RemoveItem(item);
    }

    private void ToggleCheckoutForm()
    {
        showCheckoutForm = !showCheckoutForm;
    }

    private async Task SubmitOrder()
    {
        if (string.IsNullOrWhiteSpace(customerName) || string.IsNullOrWhiteSpace(customerPhone))
        {
            orderMessage = "Please fill out all required fields.";
            return;
        }

        var checkout = new CheckoutDto
        {
            CustomerName = customerName,
            CustomerPhone = customerPhone,
            CustomerEmail = customerEmail,
            Items = CartService.CartItems.Select(ci => new CartItemDto
            {
                MenuItemId = ci.MenuItemId,
                MenuItemName = ci.MenuItemName,
                Price = ci.Price,
                Quantity = ci.Quantity,
                Customization = ci.Customization
            }).ToList()
        };


        try
        {
            // Make sure this matches your API route
            var response = await Http.PostAsJsonAsync("api/orders/checkout", checkout);

            if (response.IsSuccessStatusCode)
            {
                // Read the API response which contains the generated OrderCode
                var createdOrder = await response.Content.ReadFromJsonAsync<OrderResponseDto>();
                if (createdOrder != null)
                {
                    orderCode = createdOrder.OrderCode; // <-- now this will populate
                    readyTime = DateTime.Now.AddMinutes(20);
                    orderMessage = "success";

                    CartService.ClearCart();
                    showCheckoutForm = false;
                }
                else
                {
                    orderMessage = "Error retrieving order details.";
                }
            }
            else
            {
                orderMessage = "Error submitting order. Please try again.";
            }
        }
        catch
        {
            orderMessage = "Error submitting order. Please try again.";
        }
    }

    // Helper DTO to match the API response
    private class OrderResponseDto
    {
        public int OrderId { get; set; }
        public string OrderCode { get; set; } = string.Empty;
    }


}