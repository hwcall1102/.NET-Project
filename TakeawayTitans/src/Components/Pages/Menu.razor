@page "/menu"
@using TakeawayTitans.Dto
@using TakeawayTitans.Services
@using TakeawayTitans.Data.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ShoppingCartService CartService
@rendermode InteractiveServer

<h3 class="mb-4 text-center">Menu</h3>

@if (menuItems == null)
{
    <p>Loading menu...</p>
}
else if (!menuItems.Any())
{
    <p>No items available.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 px-3">
        @foreach (var item in menuItems)
        {
            <div class="col">
                <div class="card h-100 shadow-sm p-3">
                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                    {
                        <img src="@item.ImageUrl" class="card-img-top rounded" alt="@item.Name" style="object-fit: cover; height: 200px;">
                    }
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title mb-2">@item.Name</h5>
                        <p class="card-text text-muted mb-2">@item.Description</p>
                        <p class="card-text fw-bold mb-3">$@item.Price.ToString("0.00")</p>

                        <button class="btn btn-warning text-dark fw-semibold mt-auto" 
                                @onclick="() => ToggleCustomize(item.Id)">
                            @(selectedItemId == item.Id ? "Cancel" : "Customize")
                        </button>

                        @if (selectedItemId == item.Id)
                        {
                            <div class="mt-3 p-2 border rounded bg-light">
                                <div class="input-group mb-3">
                                    <button class="btn btn-secondary" type="button" @onclick="() => ChangeQuantity(-1)">-</button>
                                    <input type="number" class="form-control text-center" min="1" @bind="quantity" readonly />
                                    <button class="btn btn-secondary" type="button" @onclick="() => ChangeQuantity(1)">+</button>
                                </div>

                                <input type="text" class="form-control mb-3" @bind="notes" placeholder="Special instructions" />

                                <button class="btn btn-success w-100 fw-semibold" @onclick="() => AddToCart(item)">
                                    Add to Cart
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

<!-- Floating Cart Button -->
<button class="btn go-to-cart fw-bold" @onclick="GoToCart">
    Review Order (@CartService.CartItems.Sum(i => i.Quantity))
</button>

@code {
    private List<MenuItemDto>? menuItems;
    private int selectedItemId = -1;
    private int quantity = 1;
    private string notes = string.Empty;

    private Func<Task>? cartChangedHandler;

    protected override async Task OnInitializedAsync()
    {
        await LoadMenu();
    }

    protected override void OnInitialized()
    {
        cartChangedHandler = () => InvokeAsync(StateHasChanged);
        CartService.OnChange += cartChangedHandler;
    }

    public void Dispose()
    {
        if (cartChangedHandler != null)
            CartService.OnChange -= cartChangedHandler;
    }

    private async Task LoadMenu()
    {
        try
        {
            menuItems = await Http.GetFromJsonAsync<List<MenuItemDto>>("api/MenuItems");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching menu items: {ex.Message}");
            menuItems = new List<MenuItemDto>();
        }
    }

    private void ToggleCustomize(int id)
    {
        if (selectedItemId == id)
        {
            selectedItemId = -1;
        }
        else
        {
            selectedItemId = id;
            quantity = 1;
            notes = string.Empty;
        }

        StateHasChanged();
    }

    private void ChangeQuantity(int delta)
    {
        quantity += delta;
        if (quantity < 1) quantity = 1;
    }

    private void AddToCart(MenuItemDto item)
    {
        var cartItem = new CartItemDto
        {
            MenuItemId = item.Id,
            MenuItemName = item.Name,
            Price = item.Price,
            Quantity = quantity,
            Customization = notes
        };

        CartService.AddItem(cartItem);

        selectedItemId = -1;
        quantity = 1;
        notes = string.Empty;
    }
    private void GoToCart()
    {
        Navigation.NavigateTo("/order");
    }
}

<style>
    .go-to-cart {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1000;
        padding: 12px 20px;
        border-radius: 50px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.2);
        background-color: #198754;   /* match btn-success */
        color: white;
        font-weight: bold;
        border: none;
        margin: 0;
    }

    .go-to-cart:hover {
        background-color: #157347;   /* match btn-success hover */
        transform: translateX(-50%) scale(1.05);
        transition: background-color 0.2s ease-in-out, transform 0.2s ease-in-out;
    }
</style>

