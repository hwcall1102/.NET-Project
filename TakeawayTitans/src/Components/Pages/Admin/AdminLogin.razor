@page "/admin-login"
@using System.ComponentModel.DataAnnotations
@using System.Data.Common
@using TakeawayTitans.Models
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation

<PageTitle>Admin Login</PageTitle>
<div class="page">
    <EditForm Model="LoginUser" method="post" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        @if (errorMessage is not null)
        {
            <div class="text-danger">@errorMessage</div>
        }
        <div class="form-group">
            <label>Email: <span class="text-danger">*</span></label>
            <div>
                <TextInput @bind-Value="LoginUser.Email" Placeholder="Enter email address" class="fs-4" />
                <ValidationMessage For="() => LoginUser.Email" />
            </div>
        </div>
        <div class=form-group>
            <label>Password: <span class="text-danger">*</span></label>
            <div>
                <PasswordInput @bind-Value="LoginUser.Password" Placeholder="Enter password" Class="fs-4" />
                <ValidationMessage For="() => LoginUser.Password" />
            </div>
        </div>
        <div class="row">
            <Button Type="ButtonType.Button" @onclick="ResetForm" class="button btn-reset fs-4" Disabled=isLoading>Reset</Button>
            <Button Type="ButtonType.Submit" class="button btn-login fs-4">
                Login
                @if (isLoading)
                {
                    <Spinner />
                }
            </Button>
        </div>
    </EditForm>
</div>


@code {
    [SupplyParameterFromForm]
    private LoginModel LoginUser {get; set;} = new ();

    private string errorMessage = string.Empty;
    private bool isLoading = false;
    
    private async void HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        try 
        {
            
            var customAuthenticationStateProvider = (CustomAuthStateProvider)AuthenticationStateProvider;

            if (string.IsNullOrWhiteSpace(LoginUser.Email) || string.IsNullOrWhiteSpace(LoginUser.Password))
            {
                errorMessage = "Email and password are required.";
                return;
            }

            var token = await customAuthenticationStateProvider.LoginAsync(LoginUser.Email, LoginUser.Password);
            
            Navigation.NavigateTo($"/postlogin?token={Uri.EscapeDataString(token)}", forceLoad: true);
        }
        catch (DbException ex)
        {
            errorMessage = "Something wrong with database.  Please try again later.";
            Console.WriteLine(ex.Message);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ResetForm()
    {
        LoginUser = new();
        errorMessage = string.Empty;
        StateHasChanged();
    }
}