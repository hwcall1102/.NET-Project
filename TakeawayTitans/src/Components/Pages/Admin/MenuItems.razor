@page "/admin/menu"
@using TakeawayTitans.Data
@using TakeawayTitans.Data.Models
@inject IDbContextFactory<TakeawayTitansContext> DbFactory
@inject NavigationManager Nav
@using Microsoft.EntityFrameworkCore
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<PageTitle>Menu Items</PageTitle>

<div class="page">
    <h2 class="mb-3">Menu Items</h2>

    @if (_items is null)
    {
        <p>Loadingâ€¦</p>
    }
    else
    {
        <div class="mb-3 d-flex gap-2">
            <button class="btn btn-primary" @onclick="() => _showCreate = true">Add New</button>
            <button class="btn btn-outline-secondary" @onclick="ReloadAsync">Reload</button>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th class="text-end">Price</th>
                    <th>Description</th>
                    <th>Image</th>
                    <th class="text-end"></th>
                </tr>
            </thead>
            <tbody>
            @foreach (var m in _items)
            {
                <tr>
                    <td>@m.Name</td>
                    <td class="text-end">@m.Price</td>
                    <td>@m.Description</td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(m.ImageUrl))
                        {
                            <img src="@m.ImageUrl" alt="@m.Name" style="height:40px;object-fit:cover;border-radius:6px;" />
                        }
                    </td>
                    <td class="text-end">
                    <button class="btn btn-sm btn-outline-secondary"
                            @onclick='() => Nav.NavigateTo($"/admin/menu/edit/{m.Id}")'>Edit</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }

    @if (_showCreate)
    {
        <div class="card p-3 mt-3">
            <h4>Create Menu Item</h4>
            <EditForm Model="_newItem" OnValidSubmit="CreateAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-2">
                    <label class="form-label">Name</label>
                    <InputText class="form-control" @bind-Value="_newItem.Name" />
                </div>

                <div class="mb-2">
                    <label class="form-label">Price</label>
                    <InputNumber class="form-control" @bind-Value="_newItem.Price" />
                </div>

                <div class="mb-2">
                    <label class="form-label">Description</label>
                    <InputTextArea class="form-control" @bind-Value="_newItem.Description" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Image URL</label>
                    <InputText class="form-control" @bind-Value="_newItem.ImageUrl" />
                </div>

                <div class="d-flex gap-2">
                    <button class="btn btn-success" type="submit">Save</button>
                    <button class="btn btn-secondary" type="button" @onclick="CancelCreate">Cancel</button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    private List<MenuItem>? _items;
    private bool _showCreate;
    private MenuItem _newItem = new();

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        _items = await db.MenuItems.AsNoTracking().OrderBy(m => m.Name).ToListAsync();
    }

    private async Task ReloadAsync()
    {
        await LoadAsync();
        StateHasChanged();
    }

    //adding a new item
    private async Task CreateAsync()
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        db.MenuItems.Add(_newItem);
        await db.SaveChangesAsync();

        _newItem = new();
        _showCreate = false;
        await LoadAsync();
    }

    private void CancelCreate()
    {
        _newItem = new();
        _showCreate = false;
    }
}
