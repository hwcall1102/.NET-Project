@page "/admin/menu/edit/{Id:int}"
@using TakeawayTitans.Data
@using TakeawayTitans.Data.Models
@inject IDbContextFactory<TakeawayTitansContext> DbFactory
@inject NavigationManager Nav
@using Microsoft.EntityFrameworkCore
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<PageTitle>Edit Menu Item</PageTitle>

<div class="page">
    <h3>Edit Menu Item</h3>

    @if (_model is null)
    {
        <p>Loadingâ€¦</p>
    }
    else
    {
        <EditForm Model="_model" OnValidSubmit="SaveAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-2">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="_model.Name" />
            </div>

            <div class="mb-2">
                <label class="form-label">Price</label>
                <InputNumber class="form-control" @bind-Value="_model.Price" />
            </div>

            <div class="mb-2">
                <label class="form-label">Description</label>
                <InputTextArea class="form-control" @bind-Value="_model.Description" />
            </div>

            <div class="mb-3">
                <label class="form-label">Image URL</label>
                <InputText class="form-control" @bind-Value="_model.ImageUrl" />
            </div>

            <div class="d-flex gap-2">
                <button class="btn btn-primary" type="submit">Save</button>
                <button class="btn btn-outline-danger" type="button" @onclick="DeleteAsync">Delete</button>
                <button class="btn btn-secondary" type="button" @onclick='() => Nav.NavigateTo("/admin/menu")'>Back</button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    private MenuItem? _model;

    protected override async Task OnParametersSetAsync()
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        _model = await db.MenuItems.FirstOrDefaultAsync(m => m.Id == Id);
    }

    // Updating an existing item
    private async Task SaveAsync()
    {
        if (_model is null) return;

        await using var db = await DbFactory.CreateDbContextAsync();
        
        db.Attach(_model).State = EntityState.Modified;
        
        await db.SaveChangesAsync();
        Nav.NavigateTo("/admin/menu");
    }

    private async Task DeleteAsync()
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        var entity = await db.MenuItems.FindAsync(Id);
        if (entity is not null)
        {
            db.MenuItems.Remove(entity);
            await db.SaveChangesAsync();
        }
        Nav.NavigateTo("/admin/menu");
    }
}
